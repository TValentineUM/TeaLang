<?xml version="1.0" encoding="UTF-8"?>
<root description="Tealang AST Generation">
	<Prog>
		<FuncDecl>
			<Var Type="0">Square</Var>
			<Arg Type="0">x</Arg>
			<Block>
				<Return>
					<BinExprNode Op="*">
						<Identifier>x</Identifier>
						<Identifier>x</Identifier>
					</BinExprNode>
				</Return>
			</Block>
		</FuncDecl>
		<FuncDecl>
			<Var Type="2">XGreaterThanY</Var>
			<Arg Type="0">x</Arg>
			<Arg Type="0">y</Arg>
			<Block>
				<Decl>
					<Var Type="2">ans</Var>
						<BoolConst>true</BoolConst>
				</Decl>
				<If>
					<Condition>
						<BinExprNode Op=">">
							<Identifier>y</Identifier>
							<Identifier>x</Identifier>
						</BinExprNode>
					</Condition>
					<EvalTrue>
						<Block>
							<Assign>
								<Var>ans</Var>
								<BoolConst>false</BoolConst>
							</Assign>
						</Block>
					</EvalTrue>
					<Else>
					</Else>
				</If>
				<Return>
					<Identifier>ans</Identifier>
				</Return>
			</Block>
		</FuncDecl>
		<FuncDecl>
			<Var Type="2">XGreaterThanYv2</Var>
			<Arg Type="0">x</Arg>
			<Arg Type="0">y</Arg>
			<Block>
				<Return>
					<BinExprNode Op=">">
						<Identifier>x</Identifier>
						<Identifier>y</Identifier>
					</BinExprNode>
				</Return>
			</Block>
		</FuncDecl>
		<FuncDecl>
			<Var Type="0">AverageOfThree</Var>
			<Arg Type="0">x</Arg>
			<Arg Type="0">y</Arg>
			<Arg Type="0">z</Arg>
			<Block>
				<Decl>
					<Var Type="0">total</Var>
						<BinExprNode Op="+">
							<Identifier>x</Identifier>
							<BinExprNode Op="+">
								<Identifier>y</Identifier>
								<Identifier>z</Identifier>
							</BinExprNode>
						</BinExprNode>
				</Decl>
				<Return>
					<BinExprNode Op="/">
						<Identifier>total</Identifier>
						<FloatConst>3.0</FloatConst>
					</BinExprNode>
				</Return>
			</Block>
		</FuncDecl>
		<FuncDecl>
			<Var Type="3">JoinStr</Var>
			<Arg Type="3">s1</Arg>
			<Arg Type="3">s2</Arg>
			<Block>
				<Decl>
					<Var Type="3">s3</Var>
						<BinExprNode Op="+">
							<Identifier>s1</Identifier>
							<Identifier>s2</Identifier>
						</BinExprNode>
				</Decl>
				<Return>
					<Identifier>s3</Identifier>
				</Return>
			</Block>
		</FuncDecl>
		<FuncDecl>
			<Var Type="1">fib</Var>
			<Arg Type="1">a</Arg>
			<Block>
				<If>
					<Condition>
						<BinExprNode Op="<">
							<Identifier>a</Identifier>
							<IntConst>2</IntConst>
						</BinExprNode>
					</Condition>
					<EvalTrue>
						<Block>
							<Return>
								<Identifier>a</Identifier>
							</Return>
						</Block>
					</EvalTrue>
					<Else>
					</Else>
				</If>
				<Return>
					<BinExprNode Op="+">
						<FuncCall Id="fib">
							<BinExprNode Op="-">
								<Identifier>a</Identifier>
								<IntConst>1</IntConst>
							</BinExprNode>
						</FuncCall>
						<FuncCall Id="fib">
							<BinExprNode Op="-">
								<Identifier>a</Identifier>
								<IntConst>2</IntConst>
							</BinExprNode>
						</FuncCall>
					</BinExprNode>
				</Return>
			</Block>
		</FuncDecl>
		<Decl>
			<Var Type="0">x</Var>
				<FloatConst>2.4</FloatConst>
		</Decl>
		<Decl>
			<Var Type="0">y</Var>
				<FuncCall Id="Square">
					<FloatConst>2.5</FloatConst>
				</FuncCall>
		</Decl>
		<Print>
			<Identifier>y</Identifier>
		</Print>
		<Print>
			<FuncCall Id="XGreaterThanY">
				<Identifier>x</Identifier>
				<FloatConst>2.3</FloatConst>
			</FuncCall>
		</Print>
		<Print>
			<FuncCall Id="XGreaterThanYv2">
				<FuncCall Id="Square">
					<FloatConst>1.5</FloatConst>
				</FuncCall>
				<Identifier>y</Identifier>
			</FuncCall>
		</Print>
		<Print>
			<FuncCall Id="AverageOfThree">
				<Identifier>x</Identifier>
				<Identifier>y</Identifier>
				<FloatConst>1.2</FloatConst>
			</FuncCall>
		</Print>
		<Print>
			<FuncCall Id="JoinStr">
				<StringConst>Hello</StringConst>
				<StringConst> World</StringConst>
			</FuncCall>
		</Print>
		<Print>
			<FuncCall Id="fib">
				<IntConst>7</IntConst>
			</FuncCall>
		</Print>
		<FuncDecl>
			<Var Type="3">OverUnder50</Var>
			<Arg Type="1">age</Arg>
			<Block>
				<If>
					<Condition>
						<BinExprNode Op="<">
							<Identifier>age</Identifier>
							<IntConst>50</IntConst>
						</BinExprNode>
					</Condition>
					<EvalTrue>
						<Block>
							<Return>
								<StringConst>UnderFifty</StringConst>
							</Return>
						</Block>
					</EvalTrue>
					<Else>
						<Block>
							<Return>
								<StringConst>OverFifty</StringConst>
							</Return>
						</Block>
					</Else>
				</If>
			</Block>
		</FuncDecl>
		<For>
			<Decl>
				<Var Type="1">loopvar</Var>
					<IntConst>0</IntConst>
			</Decl>
			<Condition>
				<BinExprNode Op="<">
					<Identifier>loopvar</Identifier>
					<IntConst>10</IntConst>
				</BinExprNode>
			</Condition>
			<Assign>
				<Var>loopvar</Var>
				<BinExprNode Op="+">
					<Identifier>loopvar</Identifier>
					<IntConst>1</IntConst>
				</BinExprNode>
			</Assign>
			<EvalTrue>
				<Block>
					<Print>
						<Identifier>loopvar</Identifier>
					</Print>
				</Block>
			</EvalTrue>
		</For>
		<Decl>
			<Var Type="1">z</Var>
				<IntConst>45</IntConst>
		</Decl>
		<While>
			<Condition>
				<BinExprNode Op="<">
					<Identifier>z</Identifier>
					<IntConst>50</IntConst>
				</BinExprNode>
			</Condition>
			<EvalTrue>
				<Block>
					<Print>
						<FuncCall Id="OverUnder50">
							<Identifier>z</Identifier>
						</FuncCall>
					</Print>
					<Assign>
						<Var>z</Var>
						<BinExprNode Op="+">
							<Identifier>z</Identifier>
							<IntConst>1</IntConst>
						</BinExprNode>
					</Assign>
				</Block>
			</EvalTrue>
		</While>
		<Print>
			<FuncCall Id="OverUnder50">
				<Identifier>z</Identifier>
			</FuncCall>
		</Print>
	</Prog>
</root>
